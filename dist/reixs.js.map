{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/interopRequireWildcard.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js","src/core/constructor/index.js","src/core/constructor/reixs-all.js","src/core/constructor/reixs-race.js","src/core/constructor/reixs.js","src/core/constructor/scheduler.js","src/core/create-request/index.js","src/core/create-request/mark-map.js","src/core/create-request/request-timer.js","src/core/create-request/wait.js","src/core/request/handle-fetch.js","src/core/request/index.js","src/reixs.js","src/shared/constants.js","src/shared/utils.js"],"names":[],"mappings":"AAAA;;;ACAA,MAAM,CAAC,OAAP,GAAiB,OAAO,CAAC,aAAD,CAAP,WAAjB;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"reixs.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = require('./src/reixs').default","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","function _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nmodule.exports = _interopRequireWildcard;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import reixs from './reixs'\nimport reixsAll from './reixs-all'\nimport reixsRace from './reixs-race'\n\nexport const Reixs = reixs\nexport const ReixsAll = reixsAll\nexport const ReixsRace = reixsRace","\nimport createRequest from '../create-request'\n\nimport Scheduler from './scheduler'\n\n/**\n *  Concurrent request\n */\nexport default class ReixsAll  extends Scheduler {\n    _schedulers = []\n\n    constructor(...schedulers) {\n        super()\n        this._schedulers = schedulers\n        this._initRequest()\n    }\n\n    /**\n     * Create request function\n     */\n    _initRequest() {\n        const {_config, _sendRequest, _execute, _hook} = this\n        this.request = createRequest(\n            _config, \n            _sendRequest.bind(this), \n            _execute.bind(this), \n            _hook\n        )\n    }\n\n    /**\n     * Concurrent all scheduler\n     * \n     */\n    async _sendRequest() {\n        const {_schedulers} = this\n        const data = await Promise.all(_schedulers.map(scheduler=>{\n            return new Promise( resolve => {\n                scheduler.request.call({\n                    ...scheduler, \n                    injection(data) {\n                        resolve(data)\n                    }\n                })\n            })\n        }))\n        return data\n    }\n}\n","\nimport createRequest from '../create-request'\n\nimport Scheduler from './scheduler'\n\n/**\n *  Multiple request race\n */\nexport default class ReixsRace  extends Scheduler {\n    _schedulers = []\n\n    constructor(...schedulers) {\n        super()\n        this._schedulers = schedulers\n        this._initRequest()\n    }\n\n    /**\n     * Create request function\n     */\n    _initRequest() {\n        const {_config, _sendRequest, _execute, _hook} = this\n        this.request = createRequest(\n            _config, \n            _sendRequest.bind(this), \n            _execute.bind(this), \n            _hook\n        )\n    }\n\n    /**\n     * The scheduler for the race\n     * \n     */\n    async _sendRequest() {\n        const {_schedulers} = this\n        const data = await Promise.race(_schedulers.map(scheduler=>{\n            return new Promise( resolve => {\n                scheduler.request.call({\n                    ...scheduler, \n                    injection(data) {\n                        resolve(data)\n                    }\n                })\n            })\n        }))\n        return data\n    }\n}\n","import {dataFiltering, isPlainObject} from '../../shared/utils'\nimport {METHOD_TYPES} from '../../shared/constants'\n\nimport createRequest from '../create-request'\nimport * as request from '../request'\n\nimport Scheduler from './scheduler'\n\n/**\n *  Separate request object\n */\nclass Reixs  extends Scheduler {\n    constructor(url, method = 'get', params = null) {\n        super()\n\n        // Initialize the http\n        this._http = {\n            ...this._http,\n            url,\n            params\n        }\n        this.setMethod(method)\n\n        // Create request function\n        this._initRequest()\n    }\n\n    // Multiple requests Shared\n    static global = {\n        globalHeader: {},\n        globalParams: {},\n        reqPipes: [],\n        resPipes: [],\n        beforeReq: null,\n        afterReq: null,\n        beforeRes: null,\n        afterRes: null\n    }\n\n    // Network request information\n    _http = {\n        url: '',\n        method: null,\n        header: {},\n        params: null,\n        cookie: true\n    }\n\n    // Data filtering\n    _pipes = {\n        reqPipes: [],\n        resPipes: []\n    }\n\n    // Different stage interceptors\n    _interceptors = {\n        beforeReq: null, \n        afterReq: null, \n        beforeRes: null, \n        afterRes: null\n    }\n\n    /**\n     * Complete request header\n     * \n     * @return {Object} \n     */\n    get requesetHeader() {\n        const {header} = this._http\n        const {globalHeader} = Reixs.global\n        return Object.assign(globalHeader, header)\n    }\n    \n    /**\n     * Complete request parameters\n     * \n     * @param {Object} params \n     */\n    _getParams(params) {\n        if (typeof params !== 'object') return params\n        const {globalParams} = Reixs.global\n        return Object.assign(globalParams, params)\n    }\n\n    /**\n     * Create request function\n     */\n    _initRequest() {\n        const {_config, _sendRequest, _execute, _hook} = this\n        this.request = createRequest(\n            _config, \n            _sendRequest.bind(this), \n            _execute.bind(this), \n            _hook\n        )\n    }\n\n    /**\n     * Set the request url\n     * \n     * @param {string} url \n     */\n    setUrl(url) {\n        if (typeof url === 'string') {\n            this._http.url = url\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n    \n    /**\n     * Set the request header\n     * \n     * @param {Object} header \n     */\n    setHeader(header) {\n        if (isPlainObject(header)) {\n            this._http.header = header\n        } else {\n            throw new Error('The argument passed in must be a literal object')\n        }\n        return this\n    }\n\n    /**\n     * Set request parameters\n     * \n     * @param {*} params \n     */\n    setParams(params) {\n        if (typeof params !== 'object' || isPlainObject(params) || Array.isArray(params)) {\n            this._http.params = params\n        } else {\n            throw new Error('When the parameter type is object, The argument passed in must be a literal object')\n        }   \n        return this\n    }\n    \n    /**\n     * Set whether to carry cookies\n     * \n     * @param {boolean} ifCookie \n     */\n    setCookie(ifCookie) {\n        if (typeof ifCookie === 'boolean') {\n            this._http.cookie = ifCookie\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n\n    /**\n     * Set the request method\n     * \n     * @param {string} method \n     */\n    setMethod(method = null) {\n        method = method.toLowerCase()\n        if (METHOD_TYPES.includes(method)) {\n            this._http.method = method\n        } else {\n            throw new Error('Invalid method')\n        }\n        return this\n    }\n    \n    /**\n     * Set the request filter pipeline\n     * \n     * @param  {...any} pipes \n     */\n    reqPipes(...pipes) {\n        if (pipes.find(pipe =>typeof pipe !== 'function')) {\n            throw new Error('Pipe must be a function')\n        } else {\n            this._pipes.reqPipes = [...pipes]\n        }\n        return this\n    }\n\n    /**\n     * Set the response filter pipeline\n     * \n     * @param  {...any} pipes \n     */\n    resPipes(...pipes) {\n        if (pipes.find(pipe =>typeof pipe !== 'function')) {\n            throw new Error('Pipe must be a function')\n        } else {\n            this._pipes.resPipes = [...pipes]\n        }\n        return this\n    }\n\n    /**\n     * Set request interceptor\n     * @param {Function} interceptor \n     */\n    reqInterceptor(interceptor) {\n        if (typeof interceptor === 'function') {\n            if (this._pipes.reqPipes.length) {\n                this._interceptors.afterReq = interceptor\n            } else {\n                this._interceptors.beforeReq = interceptor\n            }\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n    \n    /**\n     * Set response interceptor\n     * @param {Function} interceptor \n     */\n    resInterceptor(interceptor) {\n        if (typeof interceptor === 'function') {\n            if (this._pipes.resPipes.length) {\n                this._interceptors.afterRes = interceptor\n            } else {\n                this._interceptors.beforeRes = interceptor\n            }\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n\n    /**\n     * Send the request to the server\n     * \n     * @param {*} params \n     * @param {string} type \n     */\n    async _sendRequest(params = this._http.params, type) {\n        const {url, method, cookie} = this._http\n        const {errorHook} = this._hook\n        const {reqPipes, resPipes} = this._pipes\n        const {beforeReq, afterReq, beforeRes, afterRes} = this._interceptors\n        const {\n            reqPipes: globalReqPipes, \n            resPipes: globalResPipes,\n            beforeReq: globalBeforeReq,\n            afterReq: globalAfterReq,\n            beforeRes: globalBeforeRes,\n            afterRes: globalAfterRes\n        } = this.constructor.global\n        \n        const requestType = type ? type : method\n        const requestParams = this._getParams(params)\n\n        // Front request interceptor\n        if ((globalBeforeReq && globalBeforeReq(requestParams) === false) \n        || (beforeReq && beforeReq(requestParams) === false)) {\n            return \n        }\n\n        // The request filtering\n        let finalParams\n        try {\n            finalParams = dataFiltering([...globalReqPipes, ...reqPipes], requestParams)\n        } catch (error) {\n            errorHook(error)\n        }\n        \n        // Rear request interceptor\n        if ((globalAfterReq && globalAfterReq(finalParams) === false) \n        || (afterReq && afterReq(finalParams) === false)) {\n            return \n        }\n\n        const data = await request[requestType](\n            url, \n            finalParams,\n            this.requesetHeader,\n            cookie\n        )\n        \n        // Front response interceptor\n        if ((globalBeforeRes && globalBeforeRes(data) === false) \n        || (beforeRes && beforeRes(data) === false)) {\n            return \n        }\n\n        // The response filtering\n        let finalData\n        try {\n            finalData = dataFiltering([...globalResPipes, ...resPipes], data)\n        } catch (error) {\n            errorHook(error)\n        }\n\n        // Rear response interceptor\n        if ((globalAfterRes && globalAfterRes(finalData) === false) \n        || (afterRes && afterRes(finalData) === false)) {\n            return \n        }\n\n        return finalData\n    }\n}\n\n// Bind request category \nMETHOD_TYPES.map(requestType=>{\n    Reixs.prototype[requestType] = function(params) {\n        this.request(params, requestType)\n    }\n})\n\nexport default Reixs","/**\n * The underlying request model\n */\nclass Scheduler {\n    // Request trigger rule configuration\n    _config = {\n        throttle: false,\n        debounce: 0,\n        audit: false,\n        overtime: null\n    }\n\n    // Life cycle function\n    _hook = {\n        prepareHook: null,\n        tartHook: null,\n        endHook: null,\n        errorHook: null\n    }\n\n    // Task queue executed after the request is completed\n    _taskList = new Map()\n\n    /**\n     * Circular call task\n     * @param {*} data \n     */\n    _execute(data) {\n        const {errorHook} = this._hook\n        if (data !== undefined) {\n            try {\n                [...this._taskList.keys()].forEach(task =>{\n                    task(data)\n                })\n            } catch (error) {\n                errorHook && errorHook(error)\n            }\n        }\n    }\n\n    /**\n     * Set throttle\n     * \n     * @param {number|boolean} settings \n     */\n    throttle(settings) {\n        if (typeof settings === 'number' || settings === false) {\n            this._config.throttle = settings\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n\n    /**\n     * Set debounce\n     * \n     * @param {number|boolean} settings \n     */\n    debounce(settings) {\n        if (typeof settings === 'number' || settings === false) {\n            this._config.debounce = settings\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n    \n    /**\n     * Set audit\n     * \n     * @param {number|boolean} settings \n     */\n    audit(settings) {\n        if (typeof settings === 'number' || typeof settings === 'boolean') {\n            this._config.audit = settings\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n    \n    /**\n     * Set overtime\n     * \n     * @param {number|null} time \n     */\n    overtime(time) {\n        if (typeof time === 'number' || time === null) {\n            this._config.overtime = time\n        } else {\n            throw new Error('Invalid type')\n        }\n        return this\n    }\n\n    /**\n     * Add task\n     * \n     * @param {Function} task \n     */\n    task(task) {\n        if (typeof task === 'function') {\n            this._taskList.set(task)\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n\n    /**\n     * Remove assigned task\n     * \n     * @param {Function} task \n     */\n    removeTask(task) {\n        if (!this._taskList.delete(task)) {\n            throw new Error('Remove task failed')\n        }\n    }\n\n    /**\n     * Remove all task\n     */\n    removeAllTask() {\n        this._taskList.clear()\n    }\n    \n    /**\n     * Request to prepare\n     * \n     * @param {Function} prepareHook \n     */\n    prepare(prepareHook) {\n        if (typeof prepareHook === 'function') {\n            this._hook.prepareHook = prepareHook\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n\n    /**\n     * Request to start\n     * \n     * @param {Function} startHook \n     */\n    start(startHook) {\n        if (typeof startHook === 'function') {\n            this._hook.startHook = startHook\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n    \n    /**\n     * Request to end\n     * \n     * @param {Function} endHook \n     */\n    end(endHook) {\n        if (typeof endHook === 'function') {\n            this._hook.endHook = endHook\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n    \n    /**\n     * Request to error\n     * \n     * @param {Function} errorHook \n     */\n    error(errorHook) {\n        if (typeof errorHook === 'function') {\n            this._hook.errorHook = errorHook\n            return this\n        } else {\n            throw new Error('Invalid type')\n        }\n    }\n}\n\n// Scheduler is blocked from inheriting an Object\nObject.setPrototypeOf(Scheduler.prototype, Object.create(null))\n\nexport default Scheduler","import MarkMap from './mark-map'\nimport {ThrottleWait, DebounceWait} from './wait'\nimport requestTimer from './request-timer'\n\n/**\n * The method to create the request\n * \n * @param {Object} config \n * @param {Function} sendRequest \n * @param {Array} execute \n * @param {Object} hook \n */ \nexport default function(config, sendRequest, execute, hook) {\n    const markMap = new MarkMap()\n    const throttleWait = new ThrottleWait()\n    const debounceWait = new DebounceWait()\n    return async function(...par) {\n        const {prepareHook, startHook, endHook} = hook\n        const {throttle, debounce, audit, overtime} = config\n\n        // External rewrite method\n        const {injection} = this\n\n        prepareHook && prepareHook()\n        let mark\n        if (audit) {\n            mark = markMap.get(audit)\n        }\n        await Promise.all([\n            throttleWait.get(throttle), \n            debounceWait.get(debounce)\n        ])\n        startHook && startHook()\n        const {timeout, data} = await requestTimer(sendRequest(...par), overtime)\n\n        if (data === undefined) {\n            endHook && endHook()\n            return \n        }\n\n        // If audit is set, the duplicate request is discarded\n        if (!audit || markMap.test(mark)) {\n            // If the timeout occurs, the task is not processed\n            if (!timeout) {\n                if (injection) {\n                    injection(data)\n                } \n                execute(data)\n            }\n            endHook && endHook()\n        }\n    }\n}","/**\n * Verify that mark is deprecated\n */\nexport default class {\n    _map = []\n\n    /**\n     * Get mark\n     * @param {number|boolean} audit \n     */\n    get(audit) {\n        const {_map} = this\n        if (audit) {\n            const sym = Symbol()\n            const time = Date.now()\n            let sign\n            if (!_map.length \n                || (time - _map[_map.length - 1].time > audit \n                    && audit !== true)\n            ) {\n                sign = {\n                    sym, \n                    time\n                }\n                _map.push(sign)\n            } else {\n                sign = _map[_map.length - 1]\n                sign.sym = sym\n                sign.time = time\n            }\n\n            return {\n                sign,\n                sym: sign.sym\n            }\n        }\n        return null\n    }\n\n    /**\n     * Verify the mark\n     * @param {Object} mark \n     */\n    test(mark) {\n        if (mark && mark.sym !== mark.sign.sym) {\n            return false\n        } \n\n        if (mark) {\n            const {_map} = this\n            const index = _map.indexOf(mark.sign)\n            _map.splice(index, 1)\n        }\n        return true\n    }\n}","/**\n * Create delay promise\n * \n * @param {number} time \n */\nfunction createWait(time) {\n    return time === 0 ? Promise.resolve()\n        : new Promise(resolve=>{\n            setTimeout(()=>resolve(), time)\n        })\n}\n\n/**\n * Detect timeout\n * \n * @param {Promise} promise \n * @param {null|number} time \n */\nexport default function requestTimer(promise, time) {\n    const request = promise.then(data=>({\n        timeout: false, \n        data\n    }))\n    const timer = createWait(time).then(()=>({\n        timeout: true, \n        data: null\n    }))\n    return time === null ? request\n        : Promise.race([request, timer])\n}","/**\n * Create wait object\n */\nclass Wait {\n    _timer = null\n\n    /**\n     * Create internal promise\n     * @param {number} time \n     */\n    _createPromise(time) {\n        return time ? new Promise(resolve=>{\n            this._timer =  setTimeout(()=>{ \n                this._timer = null\n                resolve() \n            }, time)\n        }) : Promise.resolve()\n    }\n}\n\n/**\n * Create debounce wait object\n */\nexport class ThrottleWait extends Wait {\n    constructor() {\n        super()\n    }\n\n    /**\n     * get await promise\n     * @param {number} time \n     */\n    get(time) {\n        if (this._timer) {\n            return new Promise(()=>{})\n        }\n        return this._createPromise(time)\n    }\n}\n\n/**\n * Create debounce wait object\n */\nexport class DebounceWait extends Wait {\n    constructor() {\n        super()\n    }\n\n    /**\n     * get await promise\n     * @param {number} time \n     */\n    get(time) {\n        if (this._timer) {\n            clearTimeout(this._timer)\n            this._timer = null\n        }\n        return this._createPromise(time)\n    }\n}","\n/**\n * Check for success\n * \n * @param {Object} response \n */\nfunction checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        const contentType = response.headers.get('content-type')\n        if (contentType && contentType.includes('application/json')) {\n            return response.json()\n        } else {\n            return response.text()\n        }\n    } else {\n        throw new Error()\n    }\n}\n\n/**\n * Handle fetch\n * \n * @param {Object} promise \n */\nexport default function handleFetch(promise) {\n    return promise\n        .then(response => checkStatus(response))\n        .catch(error => {\n            throw error\n        })\n}","import {CONTENT_TYPE} from '../../shared/constants'\nimport handleFetch from './handle-fetch'\nimport {isPlainObject} from '../../shared/utils'\n\n/**\n * Query String Parameters\n *\n * @param {string} url\n * @param {*} data\n * @param {Object} headers\n * @param {boolean} cookie\n */\nexport function get(url, data, headers, cookie) {\n    url = new URL(url)\n    if (isPlainObject(data)) {\n        Object.keys(data)\n            .forEach(key => url.searchParams.append(key, data[key]))\n    } else {\n        url.search = data.toString()\n    }\n    const promise = fetch(url, {\n        method: 'GET',\n        headers: {\n            ...headers\n        },\n        credentials: cookie ? 'include' : 'omit'\n    })\n    return handleFetch(promise)\n}\n\n/**\n * Dynamic Router\n *\n * @param {string} url\n * @param {*} data\n * @param {Object} headers\n * @param {boolean} cookie\n */\nexport function push(url, data, headers, cookie) {\n    url = new URL(url)\n    url.pathname += `/${data.toString()}`\n    const promise = fetch(url, {\n        method: 'GET',\n        headers: {\n            ...headers\n        },\n        credentials: cookie ? 'include' : 'omit'\n    })\n    return handleFetch(promise)\n}\n\n/**\n * Request Payload\n *\n * @param {string} url\n * @param {*} data\n * @param {Object} headers\n * @param {boolean} cookie\n */\nexport function post(url, data, headers, cookie) {\n    url = new URL(url)\n    if (isPlainObject(data)) {\n        data = JSON.stringify(data)\n    }\n    const promise = fetch(url, {\n        method: 'POST',\n        body: data.toString(),\n        headers: {\n            'Content-type': CONTENT_TYPE['JSON'],\n            ...headers\n        },\n        credentials: cookie ? 'include' : 'omit'\n    })\n    return handleFetch(promise)\n}\n\n/**\n * Form Data\n *\n * @param {string} url\n * @param {*} data\n * @param {Object} headers\n * @param {boolean} cookie\n */\nexport function form(url, data, headers, cookie) {\n    url = new URL(url)\n    let fromData = ''\n    if (isPlainObject(data)) {\n        Object.keys(data).forEach(key => {\n            fromData += `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}&`\n        })\n    } else {\n        fromData = data.toString()\n    }\n    const promise = fetch(url, {\n        method: 'POST',\n        body: fromData,\n        headers: {\n            'Content-type': CONTENT_TYPE['FORM'],\n            ...headers\n        },\n        credentials: cookie ? 'include' : 'omit'\n    })\n    return handleFetch(promise)\n}\n","import {Reixs, ReixsAll, ReixsRace} from './core/constructor'\n\nimport {isPlainObject} from './shared/utils'\n\n/**\n * Set pipe \n * \n * @param {string} name \n * @param  {...any} funList \n */\nfunction setPipes(name, ...funList) {\n    funList.forEach(fn=>{\n        if (typeof fn !== 'function') {\n            throw new Error('Invalid type')\n        }\n    })\n    Reixs.global[name] = [...funList]\n}\n\n/**\n * Set Interceptor\n * \n * @param {string} name \n * @param {Function} fun \n */\nfunction setInterceptor(name, fun) {\n    if (typeof fn === 'function') {\n        Reixs.global[name] = fun\n    } else {\n        throw new Error('Invalid type')\n    }\n}\n\n/**\n * reixs method\n * \n * @param {string} url \n * @param {string} method \n * @param {*} params \n */\nfunction reixs(url, method, params) {\n    return  new Reixs(url, method, params)\n}\n\n// reixs.all\nreixs.all = (...scheduler) => new ReixsAll(...scheduler)\n// reixs.race\nreixs.race = (...scheduler) => new ReixsRace(...scheduler)\n\n// Replaced by browserify-versionify transform\nreixs.version = '__VERSION__'\n\n// Set request and response pipe\nreixs.reqPipes = setPipes.bind(null, 'reqPipes')\nreixs.resPipes = setPipes.bind(null, 'resPipes')\n\n// Set request and response interceptor\nreixs.beforeReq = setInterceptor.bind(null, 'beforeReq')\nreixs.afterReq = setInterceptor.bind(null, 'afterReq')\nreixs.beforeRes = setInterceptor.bind(null, 'beforeRes')\nreixs.afterRes = setInterceptor.bind(null, 'afterRes')\n\n// Set global header\nReflect.defineProperty(reixs, 'globalHeader', {\n    set(value) {\n        if (isPlainObject(value)) {\n            Reixs.global.globalHeader = value\n        } else {\n            throw new Error('The argument passed in must be a literal object')\n        }\n    }\n})\n\n// Set global params\nReflect.defineProperty(reixs, 'globalParams', {\n    set(value) {\n        if (isPlainObject(value)) {\n            Reixs.global.globalParams = value\n        } else {\n            throw new Error('The argument passed in must be a literal object')\n        }\n    }\n})\n\nexport default reixs\n\n\n","export const METHOD_TYPES = [\n    'get',\n    'post',\n    'form',\n    'push'\n]\n\nexport const CONTENT_TYPE = {\n    JSON: 'application/json;charset=UTF-8',\n    FORM: 'application/x-www-form-urlencoded; charset=UTF-8'\n}","/**\n * Data processing\n * \n * @param {Array} pipes \n * @param {*} data \n */\nexport function dataFiltering(pipes, data) {\n    const newData = [data, ...pipes].reduce((prev, cur)=>cur(prev))\n    return newData\n}\n\n/**\n * Determines whether it is a literal object\n * \n * @param {Object} obj \n */\nexport function isPlainObject(obj) {\n    if (typeof obj !== 'object' || obj === null) return false\n  \n    let proto = obj\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto)\n    }\n  \n    return Object.getPrototypeOf(obj) === proto\n}\n  "],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}